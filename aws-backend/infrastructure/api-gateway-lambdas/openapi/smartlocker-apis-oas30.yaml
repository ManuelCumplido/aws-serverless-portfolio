openapi: "3.0.3"
info:
  title: "SmartLocker API"
  version: "1.0.0"

# Apply Cognito authorizer globally
security:
  - CognitoAuthorizer: []

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true

paths:
  /lockers:
    post:
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-request-models:
        application/json: CreateLockerRequest 
      parameters:
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLockerRequest"
        required: true
      responses:
        "200":
          description: "200 response"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:create-locker-${EnvironmentKey}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
    get:
        responses:
          "200":
            description: "200 response"
        x-amazon-apigateway-integration:
          type: aws_proxy
          httpMethod: POST
          uri: !Sub >
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:list-lockers-${EnvironmentKey}/invocations
          responses:
            default:
              statusCode: "200"

  /lockers/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Locker found"
        "404":
          description: "Locker not found"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:get-locker-${EnvironmentKey}/invocations
        responses:
          default:
            statusCode: "200"

    put:
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-request-models:
        application/json: UpdateLockerRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLockerRequest"
      responses:
        "200":
          description: "Locker updated"
        "404":
          description: "Locker not found"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:update-locker-${EnvironmentKey}/invocations
        responses:
          default:
            statusCode: "200"

    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Locker deleted"
        "404":
          description: "Locker not found"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:delete-locker-${EnvironmentKey}/invocations
        responses:
          default:
            statusCode: "204"

components:
  schemas:
    # Model definition for CreateLocker requests
    # This enforces that every POST /lockers request body must follow this schema
    CreateLockerRequest:
      type: object
      properties:
        lockerId:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 3
          maxLength: 36
        location:
          type: string
          minLength: 3
          maxLength: 100
        status:
          type: string
          enum: ["active", "inactive"]
      required: ["lockerId", "location", "status"]
      additionalProperties: false

    # Model definition for UpdateLocker requests
    # This enforces that every PUT /lockers/{id} request body must follow this schema
    UpdateLockerRequest:
      type: object
      properties:
        location:
          type: string
          minLength: 3
          maxLength: 100
        status:
          type: string
          enum: ["active", "inactive"]
      additionalProperties: false
      minProperties: 1

  securitySchemes:
    CognitoAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${SmartLockersUserPool}
